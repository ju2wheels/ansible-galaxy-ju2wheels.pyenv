---

- block:
    - name: Create pyenv test users
      become: true
      loop_control:
        loop_var: user
      user:
        createhome: true
        name:       "{{ user.username }}"
        skeleton:   "{{ pyenv_test_skel }}"
        state:      present
      with_items: "{{ pyenv_test_users }}"
      tags:
        - unit test
        - unit test resource

    # Our Docker unit test images have had core Ansible module dependencies pre-installed. Among this is the virtualenv package which seems to be causing pyenv
    # problems in creating virtualenvs.
    - name: Uninstall user level virtualenv package if installed and running in Docker as it seems to be causing conflicts create virtualenvs with pyenv
      become: true
      shell: /root/.local/bin/pip2.7 uninstall -y virtualenv
      ignore_errors: true
      when: hostvars[inventory_hostname].ansible_virtualization_role == 'guest' and hostvars[inventory_hostname].ansible_virtualization_type == 'docker'
      tags:
        - unit test
        - unit test resource

    # Test primary install and uninstall task sets with recommended defaults
    - include_tasks: pyenv_test_full.yml

    # Test all individually runnable task sets with required variables in a disabled state. All tasks should end up being skipped or result in no-op.
    - include_tasks: pyenv_test_component_disabled.yml

    # Test all individually runnable tasks sets with required variables. All tasks should end up being run in install/uninstall mode based on the task set context.
    - include_tasks: pyenv_test_component_enabled.yml
  always:
    # WARNING: This will remove the test users and their home directory!!
    # I add some sanity checks here just in case one of you smart alecks changes the test users to one that probably should not be removed.
    - name: Remove pyenv test users
      become: true
      loop_control:
        loop_var: user
      user:
        name:   "{{ user.username }}"
        remove: true
        state:  absent
      with_items: "{{ pyenv_test_users }}"
      when: user.username not in ['root', hostvars[inventory_hostname].ansible_env.SUDO_USER | default(hostvars[inventory_hostname].ansible_env.USERNAME) | default()]
      tags:
        - unit test
        - unit test resource
